Description: >
    This template deploys a VPC, with a pair of public subnets spread 
    across two Availabilty Zones. It deploys an Internet Gateway, with a default 
    route on the public subnets.  It also deploys NACL's and 
    security groups allowing all traffic on 80 to the load balancer.  Webservers
    will have ssm enabled and will log their logfiles to cloudwatch.

#==================================================
Parameters:
#==================================================
    ProjectName:
        Description: The name of this project
        Type: String
        Default: worldautomation
        AllowedPattern: "^[a-z]*$"

    VpcCIDR: 
        Description: Please enter the IP range (CIDR notation) for this VPC
        Type: String
        Default: 10.192.0.0/16

    PublicSubnet1CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the first Availability Zone
        Type: String
        Default: 10.192.10.0/24

    PublicSubnet2CIDR:
        Description: Please enter the IP range (CIDR notation) for the public subnet in the second Availability Zone
        Type: String
        Default: 10.192.11.0/24

    WebServerInstanceType:
        Type: String
        Default: t1.micro
        AllowedValues:
            - t1.micro
            - m1.small
            - m1.medium
            - m1.large
        Description: WebServer EC2 instance type (e.g. t1.micro, m1.small,..)
  
#==================================================
Mappings:
#==================================================
  InstanceTypeArch:
    t1.micro:
      Arch: '64'
    m1.small:
      Arch: '64'
    m1.medium:
      Arch: '64'
    m1.large:
      Arch: '64'
      
  RegionImageZone:
    us-east-1:
      '64': ami-e565ba8c
      64HVM: ami-e965ba80
    us-west-2:
      '64': ami-3ac64a0a
      64HVM: NOT_YET_SUPPORTED
    us-west-1:
      '64': ami-e78cd4a2
      64HVM: NOT_YET_SUPPORTED
    eu-west-1:
      '64': ami-f9231b8d
      64HVM: NOT_YET_SUPPORTED
 
#==================================================
Metadata:
#==================================================
    AWS::CloudFormation::Interface:
        ParameterGroups:
            - Label:
                  default: Amazon EC2 Configuration
                  Parameters:
                      - KeyPairName
                
        ParameterLabels:
            PublicSubnet1ID:
                default: Public Subnet 1 ID
            PublicSubnet2ID:
                default: Public Subnet 2 ID


#==================================================
Resources:
#==================================================
################################
# VPC DEFINITION
################################
    VPC: 
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref VpcCIDR
            Tags: 
                - Key: Name 
                  Value: !Ref ProjectName

################################
# INTERNET GATEWAY DEFINITION
################################
    InternetGateway:
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
                - Key: Name
                  Value: !Ref ProjectName
            
    InternetGatewayAttachment:
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC

################################
# DEFINE SUBNETS
################################
    PublicSubnet1: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 0, !GetAZs ]
            CidrBlock: !Ref PublicSubnet1CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProjectName} Public Subnet (AZ1)

    PublicSubnet2: 
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Select [ 1, !GetAZs ]
            CidrBlock: !Ref PublicSubnet2CIDR
            MapPublicIpOnLaunch: true
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProjectName} Public Subnet (AZ2)

################################
# DEFINE ROUTE TABLES
################################
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties: 
            VpcId: !Ref VPC
            Tags: 
                - Key: Name 
                  Value: !Sub ${ProjectName} Public Routes

    DefaultPublicRoute: 
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties: 
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    PublicSubnet1RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet1

    PublicSubnet2RouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref PublicSubnet2
    
################################
# DEFINE NACL's
################################
    PublicNetworkAcl:
        Type: AWS::EC2::NetworkAcl
        Properties:
          VpcId:
            !Ref VPC
          Tags:
              - Key: Name
                Value: !Join [ "-", [ !Ref ProjectName, "PublicNetwork" ]]

################################
# PUBLIC NETWORK ACL INBOUND RULES                
################################
    PublicNetworkAclEntryInbound80:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '125'
          Protocol: "6"
          RuleAction: allow
          Egress: 'false'
          CidrBlock: 0.0.0.0/0
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '80'
            To: '80'
    PublicNetworkAclEntryInboundAllLocalTraffic:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '140'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'false'
          CidrBlock: !Ref VpcCIDR
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '-1'
            To: '-1'
    PublicNetworkAclEntryInboundEphemeralPorts:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '150'
          Protocol: "6"
          RuleAction: allow
          Egress: 'false'
          CidrBlock: 0.0.0.0/0
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '1024'
            To: '65535'
################################
# PUBLIC NETWORK ACL OUTBOUND RULES                
################################
    PublicNetworkAclEntryOutbound80:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '100'
          Protocol: "6"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: 0.0.0.0/0
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '80'
            To: '80'
    PublicNetworkAclEntryOutbound443:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '110'
          Protocol: "6"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: 0.0.0.0/0
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '443'
            To: '443'
    PublicNetworkAclEntryOutboundEphemeral:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '120'
          Protocol: "6"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: 0.0.0.0/0
          Icmp:
            Code: "-1"
            Type: "-1"
          PortRange:
            From: '1024'
            To: '65535'
    PublicNetworkAclEntryOutboundLocalAllowAll:
        Type: AWS::EC2::NetworkAclEntry
        Properties:
          NetworkAclId:
            !Ref PublicNetworkAcl
          RuleNumber: '130'
          Protocol: "-1"
          RuleAction: allow
          Egress: 'true'
          CidrBlock: !Ref VpcCIDR
          PortRange:
            From: '-1'
            To: '-1'
           
################################
# ASSIGN SUBNETS TO NACL's
################################
    PublicSubnet1AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        DependsOn: PublicSubnet1
        Properties:
          SubnetId: !Ref PublicSubnet1
          NetworkAclId: !Ref PublicNetworkAcl

    PublicSubnet2AclAssociation:
        Type: AWS::EC2::SubnetNetworkAclAssociation
        DependsOn: PublicSubnet2
        Properties:
          SubnetId: !Ref PublicSubnet2
          NetworkAclId: !Ref PublicNetworkAcl

   
################################
# Security group that will restrict traffic to
# the designated application port
################################
    InstanceSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        Tags:
            - Key: Name
              Value: !Sub ${ProjectName} InstanceSecurityGroup
        GroupDescription: Allow 80 from the VPC
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: !Ref VpcCIDR

    LoadBalancerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        Tags:
            - Key: Name
              Value: !Sub ${ProjectName} LoadBalancerSecurityGroup
        GroupDescription: Allow port 80 to the load balancer
        VpcId: !Ref VPC
        SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0

################################
# IAM role to be used by the application instances
# The role needs to:
#   1. Interact with SSM for remote command execcution
#   2. Create CloudWatch logs for off-box logging
################################
    InstanceRole:
        Type: AWS::IAM::Role
        Properties:
            Path: /
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - ec2.amazonaws.com
                      Action:
                          - sts:AssumeRole
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM

################################
# IAM profile to be used by the application instances
################################
    InstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
            Path: /
            Roles:
                - !Ref InstanceRole

################################
# Configuration profile for application instances
# The instance user data does the following:
#   1. Installs the SSM agent
#   2. Installs the CloudWatch Logs agent
#   3. Installs the Inspector agent
#   4. Installs the webserver (including starting it)
#   5. Setups the index.html
################################
    LaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
            ImageId:
                Fn::FindInMap:
                    - RegionImageZone
                    - Ref: AWS::Region
                    - Fn::FindInMap:
                        - InstanceTypeArch
                        - Ref: WebServerInstanceType
                        - Arch
            #KeyName:
            #  Ref: KeyName
            UserData: !Base64
                "Fn::Sub": |
                    #!/bin/bash
                    yum update -y

                    # Install the SSM agent to enable remote command execution.
                    cd /tmp
                    yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          
                    # Install the CloudWatch Logs agent to enable off-box logging.
                    yum install -y awslogs
          
                    # Configure the CloudWatch Logs agent to monitor the WebServer logs.
                    cat > /etc/awslogs/awslogs.conf << EOF
                    [general]
                    state_file = /var/lib/awslogs/agent-state
          
                    [/home/var/log/httpd]
                    file = /var/log/httpd/access_log
                    log_group_name = webserver/logs
                    log_stream_name = {instance_id}
                    datetime_format = %b %d %H:%M:%S
                    EOF

                    service awslogs start

                    # Install the Inspector agent.
                    curl https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install -o inspector_agent
                    sudo bash inspector_agent

                    # Install the webserver
                    yum install -y httpd
                    chkconfig --levels 345 httpd on
                    service httpd start
                    # Give it some content
                    echo '<html><body>Automation for the people<br/><!-- ' > /var/www/html/index.html
                    hostname >> /var/www/html/index.html
                    echo ' --></body></html>' >> /var/www/html/index.html

            SecurityGroups:
                - !Ref InstanceSecurityGroup
            InstanceType: !Ref WebServerInstanceType
            IamInstanceProfile: !Ref InstanceProfile

################################
# Load balancer for the application instances
################################
    ALBListener:
      Type: AWS::ElasticLoadBalancingV2::Listener
      Properties:
          DefaultActions:
              - Type: forward
                TargetGroupArn: !Ref ALBTargetGroup
          LoadBalancerArn: !Ref ElasticLoadBalancer
          Port: 80
          Protocol: HTTP
    ElasticLoadBalancer:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
            Tags:
                - Key: Name
                  Value: !Sub ${ProjectName} Load Balancer
            Scheme: internet-facing
            Subnets:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            SecurityGroups:
                - !Ref LoadBalancerSecurityGroup
    ALBTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          Tags:
              - Key: Name
                Value: !Sub ${ProjectName} TargetGroup
          HealthCheckIntervalSeconds: 60
          UnhealthyThresholdCount: 10
          HealthCheckPath: /
          Name: WSTargetGroup
          Port: 80
          Protocol: HTTP
          VpcId:
              Ref: VPC

################################
# Auto scaling group will spawn new instances
# No elastic rules have been defined yet, so the
# instance number will remain static until then.
################################
    AutoScalingGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
            VPCZoneIdentifier:
                - !Ref PublicSubnet1
                - !Ref PublicSubnet2
            LaunchConfigurationName: !Ref LaunchConfig
            MinSize: 2
            MaxSize: 2
            TargetGroupARNs:
                - !Ref ALBTargetGroup
            HealthCheckGracePeriod: 360
            MetricsCollection:
                - Granularity: 1Minute
                  Metrics:
                      - GroupMinSize
                      - GroupMaxSize
            Tags:
                - Key: Name
                  Value: !Sub ${ProjectName} AutoscalingGroup
                  PropagateAtLaunch: true

#==================================================
Outputs: 
#==================================================
    VPC: 
        Description: A reference to the created VPC
        Value: !Ref VPC

    PublicSubnets:
        Description: A list of the public subnets
        Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]]

    LoadBalancerAddress:
      Value:
          Fn::GetAtt:
              - ElasticLoadBalancer
              - DNSName
      Description: public DNS name of the new WebServer
